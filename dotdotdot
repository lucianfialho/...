#!/bin/bash

# dotdotdot - Automatic countdown and skip functionality 
# (reticências = skipping part of the story)

set -e

# Default values
countdown_time=5
message="Skipping in"
auto_mode=false
help_mode=false

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Show help function
show_help() {
    echo "dotdotdot - Automatic countdown and skip functionality"
    echo "         (reticências = skipping part of the story)"
    echo ""
    echo "USAGE:"
    echo "  dotdotdot                     # 5 second default countdown"
    echo "  dotdotdot --skiptime 10       # Custom countdown time"  
    echo "  dotdotdot --message \"Loading\" # Custom message"
    echo "  dotdotdot --auto              # Only run if Claude Code detected"
    echo "  dotdotdot --help              # Show this help"
    echo ""
    echo "SHORT FLAGS:"
    echo "  -t, --skiptime    Countdown time in seconds"
    echo "  -m, --message     Custom countdown message"  
    echo "  -a, --auto        Auto-detect Claude Code first"
    echo "  -h, --help        Show help"
    echo ""
    echo "ALIASES:"
    echo "  You can create an alias: alias ...=dotdotdot"
    echo "  Then use: ... --skiptime 5"
}

# Detect if Claude Code is running
detect_claude() {
    if command -v pgrep &> /dev/null; then
        pgrep -f "claude" > /dev/null 2>&1
    else
        ps aux | grep -i claude | grep -v grep > /dev/null 2>&1
    fi
}

# Send automated response (macOS only for now)
send_response() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        osascript -e 'tell application "System Events" to keystroke "yes"' 2>/dev/null || true
        osascript -e 'tell application "System Events" to key code 36' 2>/dev/null || true # Enter key
    fi
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --skiptime|-t)
            if [[ -z "$2" ]] || [[ "$2" =~ ^- ]]; then
                echo -e "${RED}Error: --skiptime requires a value${NC}" >&2
                exit 1
            fi
            countdown_time="$2"
            shift 2
            ;;
        --message|-m)
            if [[ -z "$2" ]] || [[ "$2" =~ ^- ]]; then
                echo -e "${RED}Error: --message requires a value${NC}" >&2
                exit 1
            fi
            message="$2"
            shift 2
            ;;
        --auto|-a)
            auto_mode=true
            shift
            ;;
        --help|-h)
            help_mode=true
            shift
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}" >&2
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Show help if requested
if [[ "$help_mode" == true ]]; then
    show_help
    exit 0
fi

# Validate countdown time
if ! [[ "$countdown_time" =~ ^[0-9]+$ ]] || [[ "$countdown_time" -lt 1 ]] || [[ "$countdown_time" -gt 60 ]]; then
    echo -e "${RED}Error: skiptime must be a number between 1 and 60${NC}" >&2
    exit 1
fi

# Auto-detect mode
if [[ "$auto_mode" == true ]]; then
    if ! detect_claude; then
        echo -e "${YELLOW}❌ Claude Code not detected - skipping dotdotdot${NC}"
        exit 0
    fi
    echo -e "${GREEN}🔍 Claude Code detected!${NC}"
fi

echo -e "${BLUE}🤖 dotdotdot activated - $message $countdown_time seconds...${NC}"

# Countdown with progress bar
for ((i=$countdown_time; i>0; i--)); do
    progress_bar=""
    filled=$(( ($countdown_time - $i + 1) * 20 / $countdown_time ))
    
    for ((j=1; j<=20; j++)); do
        if [[ $j -le $filled ]]; then
            progress_bar+="█"
        else
            progress_bar+="░"
        fi
    done
    
    printf "\r${YELLOW}⏰ [$progress_bar] %d seconds remaining${NC}" $i
    sleep 1
done

printf "\n${GREEN}✅ dotdotdot completed!${NC}\n"

# Auto-send response if Claude Code detected
if detect_claude; then
    echo -e "${GREEN}🎯 Claude Code detected - sending automated response...${NC}"
    send_response
fi